// Generated by gencpp from file pkg1/array2d.msg
// DO NOT EDIT!


#ifndef PKG1_MESSAGE_ARRAY2D_H
#define PKG1_MESSAGE_ARRAY2D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pkg1/array1d.h>

namespace pkg1
{
template <class ContainerAllocator>
struct array2d_
{
  typedef array2d_<ContainerAllocator> Type;

  array2d_()
    : b()  {
    }
  array2d_(const ContainerAllocator& _alloc)
    : b(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::pkg1::array1d_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pkg1::array1d_<ContainerAllocator> >::other >  _b_type;
  _b_type b;





  typedef boost::shared_ptr< ::pkg1::array2d_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pkg1::array2d_<ContainerAllocator> const> ConstPtr;

}; // struct array2d_

typedef ::pkg1::array2d_<std::allocator<void> > array2d;

typedef boost::shared_ptr< ::pkg1::array2d > array2dPtr;
typedef boost::shared_ptr< ::pkg1::array2d const> array2dConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pkg1::array2d_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pkg1::array2d_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pkg1::array2d_<ContainerAllocator1> & lhs, const ::pkg1::array2d_<ContainerAllocator2> & rhs)
{
  return lhs.b == rhs.b;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pkg1::array2d_<ContainerAllocator1> & lhs, const ::pkg1::array2d_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pkg1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pkg1::array2d_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg1::array2d_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg1::array2d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg1::array2d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg1::array2d_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg1::array2d_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pkg1::array2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "514196907c24619763a39f051ec0299e";
  }

  static const char* value(const ::pkg1::array2d_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x514196907c246197ULL;
  static const uint64_t static_value2 = 0x63a39f051ec0299eULL;
};

template<class ContainerAllocator>
struct DataType< ::pkg1::array2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pkg1/array2d";
  }

  static const char* value(const ::pkg1::array2d_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pkg1::array2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "array1d[] b\n"
"\n"
"================================================================================\n"
"MSG: pkg1/array1d\n"
"int64[] a\n"
;
  }

  static const char* value(const ::pkg1::array2d_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pkg1::array2d_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct array2d_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pkg1::array2d_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pkg1::array2d_<ContainerAllocator>& v)
  {
    s << indent << "b[]" << std::endl;
    for (size_t i = 0; i < v.b.size(); ++i)
    {
      s << indent << "  b[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pkg1::array1d_<ContainerAllocator> >::stream(s, indent + "    ", v.b[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PKG1_MESSAGE_ARRAY2D_H
